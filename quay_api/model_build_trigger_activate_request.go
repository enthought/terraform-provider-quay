/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BuildTriggerActivateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildTriggerActivateRequest{}

// BuildTriggerActivateRequest struct for BuildTriggerActivateRequest
type BuildTriggerActivateRequest struct {
	// Arbitrary json.
	Config map[string]interface{} `json:"config"`
	// The name of the robot that will be used to pull images.
	PullRobot *string `json:"pull_robot,omitempty"`
}

type _BuildTriggerActivateRequest BuildTriggerActivateRequest

// NewBuildTriggerActivateRequest instantiates a new BuildTriggerActivateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildTriggerActivateRequest(config map[string]interface{}) *BuildTriggerActivateRequest {
	this := BuildTriggerActivateRequest{}
	this.Config = config
	return &this
}

// NewBuildTriggerActivateRequestWithDefaults instantiates a new BuildTriggerActivateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildTriggerActivateRequestWithDefaults() *BuildTriggerActivateRequest {
	this := BuildTriggerActivateRequest{}
	return &this
}

// GetConfig returns the Config field value
func (o *BuildTriggerActivateRequest) GetConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *BuildTriggerActivateRequest) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// SetConfig sets field value
func (o *BuildTriggerActivateRequest) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetPullRobot returns the PullRobot field value if set, zero value otherwise.
func (o *BuildTriggerActivateRequest) GetPullRobot() string {
	if o == nil || IsNil(o.PullRobot) {
		var ret string
		return ret
	}
	return *o.PullRobot
}

// GetPullRobotOk returns a tuple with the PullRobot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildTriggerActivateRequest) GetPullRobotOk() (*string, bool) {
	if o == nil || IsNil(o.PullRobot) {
		return nil, false
	}
	return o.PullRobot, true
}

// HasPullRobot returns a boolean if a field has been set.
func (o *BuildTriggerActivateRequest) HasPullRobot() bool {
	if o != nil && !IsNil(o.PullRobot) {
		return true
	}

	return false
}

// SetPullRobot gets a reference to the given string and assigns it to the PullRobot field.
func (o *BuildTriggerActivateRequest) SetPullRobot(v string) {
	o.PullRobot = &v
}

func (o BuildTriggerActivateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildTriggerActivateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	if !IsNil(o.PullRobot) {
		toSerialize["pull_robot"] = o.PullRobot
	}
	return toSerialize, nil
}

func (o *BuildTriggerActivateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuildTriggerActivateRequest := _BuildTriggerActivateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuildTriggerActivateRequest)

	if err != nil {
		return err
	}

	*o = BuildTriggerActivateRequest(varBuildTriggerActivateRequest)

	return err
}

type NullableBuildTriggerActivateRequest struct {
	value *BuildTriggerActivateRequest
	isSet bool
}

func (v NullableBuildTriggerActivateRequest) Get() *BuildTriggerActivateRequest {
	return v.value
}

func (v *NullableBuildTriggerActivateRequest) Set(val *BuildTriggerActivateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildTriggerActivateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildTriggerActivateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildTriggerActivateRequest(val *BuildTriggerActivateRequest) *NullableBuildTriggerActivateRequest {
	return &NullableBuildTriggerActivateRequest{value: val, isSet: true}
}

func (v NullableBuildTriggerActivateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildTriggerActivateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
