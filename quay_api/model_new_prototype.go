/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NewPrototype type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewPrototype{}

// NewPrototype Description of a new prototype
type NewPrototype struct {
	// Role that should be applied to the delegate
	Role           string                      `json:"role"`
	ActivatingUser *NewPrototypeActivatingUser `json:"activating_user,omitempty"`
	Delegate       NewPrototypeDelegate        `json:"delegate"`
}

type _NewPrototype NewPrototype

// NewNewPrototype instantiates a new NewPrototype object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewPrototype(role string, delegate NewPrototypeDelegate) *NewPrototype {
	this := NewPrototype{}
	this.Role = role
	this.Delegate = delegate
	return &this
}

// NewNewPrototypeWithDefaults instantiates a new NewPrototype object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewPrototypeWithDefaults() *NewPrototype {
	this := NewPrototype{}
	return &this
}

// GetRole returns the Role field value
func (o *NewPrototype) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *NewPrototype) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *NewPrototype) SetRole(v string) {
	o.Role = v
}

// GetActivatingUser returns the ActivatingUser field value if set, zero value otherwise.
func (o *NewPrototype) GetActivatingUser() NewPrototypeActivatingUser {
	if o == nil || IsNil(o.ActivatingUser) {
		var ret NewPrototypeActivatingUser
		return ret
	}
	return *o.ActivatingUser
}

// GetActivatingUserOk returns a tuple with the ActivatingUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewPrototype) GetActivatingUserOk() (*NewPrototypeActivatingUser, bool) {
	if o == nil || IsNil(o.ActivatingUser) {
		return nil, false
	}
	return o.ActivatingUser, true
}

// HasActivatingUser returns a boolean if a field has been set.
func (o *NewPrototype) HasActivatingUser() bool {
	if o != nil && !IsNil(o.ActivatingUser) {
		return true
	}

	return false
}

// SetActivatingUser gets a reference to the given NewPrototypeActivatingUser and assigns it to the ActivatingUser field.
func (o *NewPrototype) SetActivatingUser(v NewPrototypeActivatingUser) {
	o.ActivatingUser = &v
}

// GetDelegate returns the Delegate field value
func (o *NewPrototype) GetDelegate() NewPrototypeDelegate {
	if o == nil {
		var ret NewPrototypeDelegate
		return ret
	}

	return o.Delegate
}

// GetDelegateOk returns a tuple with the Delegate field value
// and a boolean to check if the value has been set.
func (o *NewPrototype) GetDelegateOk() (*NewPrototypeDelegate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delegate, true
}

// SetDelegate sets field value
func (o *NewPrototype) SetDelegate(v NewPrototypeDelegate) {
	o.Delegate = v
}

func (o NewPrototype) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewPrototype) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	if !IsNil(o.ActivatingUser) {
		toSerialize["activating_user"] = o.ActivatingUser
	}
	toSerialize["delegate"] = o.Delegate
	return toSerialize, nil
}

func (o *NewPrototype) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"delegate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewPrototype := _NewPrototype{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewPrototype)

	if err != nil {
		return err
	}

	*o = NewPrototype(varNewPrototype)

	return err
}

type NullableNewPrototype struct {
	value *NewPrototype
	isSet bool
}

func (v NullableNewPrototype) Get() *NewPrototype {
	return v.value
}

func (v *NullableNewPrototype) Set(val *NewPrototype) {
	v.value = val
	v.isSet = true
}

func (v NullableNewPrototype) IsSet() bool {
	return v.isSet
}

func (v *NullableNewPrototype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewPrototype(val *NewPrototype) *NullableNewPrototype {
	return &NullableNewPrototype{value: val, isSet: true}
}

func (v NullableNewPrototype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewPrototype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
