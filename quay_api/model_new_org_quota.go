/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NewOrgQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewOrgQuota{}

// NewOrgQuota Description of a new organization quota
type NewOrgQuota struct {
	// Number of bytes the organization is allowed
	LimitBytes int32 `json:"limit_bytes"`
}

type _NewOrgQuota NewOrgQuota

// NewNewOrgQuota instantiates a new NewOrgQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewOrgQuota(limitBytes int32) *NewOrgQuota {
	this := NewOrgQuota{}
	this.LimitBytes = limitBytes
	return &this
}

// NewNewOrgQuotaWithDefaults instantiates a new NewOrgQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewOrgQuotaWithDefaults() *NewOrgQuota {
	this := NewOrgQuota{}
	return &this
}

// GetLimitBytes returns the LimitBytes field value
func (o *NewOrgQuota) GetLimitBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LimitBytes
}

// GetLimitBytesOk returns a tuple with the LimitBytes field value
// and a boolean to check if the value has been set.
func (o *NewOrgQuota) GetLimitBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LimitBytes, true
}

// SetLimitBytes sets field value
func (o *NewOrgQuota) SetLimitBytes(v int32) {
	o.LimitBytes = v
}

func (o NewOrgQuota) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewOrgQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limit_bytes"] = o.LimitBytes
	return toSerialize, nil
}

func (o *NewOrgQuota) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"limit_bytes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewOrgQuota := _NewOrgQuota{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewOrgQuota)

	if err != nil {
		return err
	}

	*o = NewOrgQuota(varNewOrgQuota)

	return err
}

type NullableNewOrgQuota struct {
	value *NewOrgQuota
	isSet bool
}

func (v NullableNewOrgQuota) Get() *NewOrgQuota {
	return v.value
}

func (v *NullableNewOrgQuota) Set(val *NewOrgQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableNewOrgQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableNewOrgQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewOrgQuota(val *NewOrgQuota) *NullableNewOrgQuota {
	return &NullableNewOrgQuota{value: val, isSet: true}
}

func (v NullableNewOrgQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewOrgQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
