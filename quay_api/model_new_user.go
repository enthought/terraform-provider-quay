/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NewUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewUser{}

// NewUser Fields which must be specified for a new user.
type NewUser struct {
	// The user's username
	Username string `json:"username"`
	// The user's password
	Password string `json:"password"`
	// The user's email address
	Email *string `json:"email,omitempty"`
	// The optional invite code
	InviteCode *string `json:"invite_code,omitempty"`
	// The (may be disabled) recaptcha response code for verification
	RecaptchaResponse *string `json:"recaptcha_response,omitempty"`
}

type _NewUser NewUser

// NewNewUser instantiates a new NewUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewUser(username string, password string) *NewUser {
	this := NewUser{}
	this.Username = username
	this.Password = password
	return &this
}

// NewNewUserWithDefaults instantiates a new NewUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewUserWithDefaults() *NewUser {
	this := NewUser{}
	return &this
}

// GetUsername returns the Username field value
func (o *NewUser) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *NewUser) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *NewUser) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *NewUser) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *NewUser) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *NewUser) SetPassword(v string) {
	o.Password = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *NewUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *NewUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *NewUser) SetEmail(v string) {
	o.Email = &v
}

// GetInviteCode returns the InviteCode field value if set, zero value otherwise.
func (o *NewUser) GetInviteCode() string {
	if o == nil || IsNil(o.InviteCode) {
		var ret string
		return ret
	}
	return *o.InviteCode
}

// GetInviteCodeOk returns a tuple with the InviteCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewUser) GetInviteCodeOk() (*string, bool) {
	if o == nil || IsNil(o.InviteCode) {
		return nil, false
	}
	return o.InviteCode, true
}

// HasInviteCode returns a boolean if a field has been set.
func (o *NewUser) HasInviteCode() bool {
	if o != nil && !IsNil(o.InviteCode) {
		return true
	}

	return false
}

// SetInviteCode gets a reference to the given string and assigns it to the InviteCode field.
func (o *NewUser) SetInviteCode(v string) {
	o.InviteCode = &v
}

// GetRecaptchaResponse returns the RecaptchaResponse field value if set, zero value otherwise.
func (o *NewUser) GetRecaptchaResponse() string {
	if o == nil || IsNil(o.RecaptchaResponse) {
		var ret string
		return ret
	}
	return *o.RecaptchaResponse
}

// GetRecaptchaResponseOk returns a tuple with the RecaptchaResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewUser) GetRecaptchaResponseOk() (*string, bool) {
	if o == nil || IsNil(o.RecaptchaResponse) {
		return nil, false
	}
	return o.RecaptchaResponse, true
}

// HasRecaptchaResponse returns a boolean if a field has been set.
func (o *NewUser) HasRecaptchaResponse() bool {
	if o != nil && !IsNil(o.RecaptchaResponse) {
		return true
	}

	return false
}

// SetRecaptchaResponse gets a reference to the given string and assigns it to the RecaptchaResponse field.
func (o *NewUser) SetRecaptchaResponse(v string) {
	o.RecaptchaResponse = &v
}

func (o NewUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.InviteCode) {
		toSerialize["invite_code"] = o.InviteCode
	}
	if !IsNil(o.RecaptchaResponse) {
		toSerialize["recaptcha_response"] = o.RecaptchaResponse
	}
	return toSerialize, nil
}

func (o *NewUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewUser := _NewUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewUser)

	if err != nil {
		return err
	}

	*o = NewUser(varNewUser)

	return err
}

type NullableNewUser struct {
	value *NewUser
	isSet bool
}

func (v NullableNewUser) Get() *NewUser {
	return v.value
}

func (v *NullableNewUser) Set(val *NewUser) {
	v.value = val
	v.isSet = true
}

func (v NullableNewUser) IsSet() bool {
	return v.isSet
}

func (v *NullableNewUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewUser(val *NewUser) *NullableNewUser {
	return &NullableNewUser{value: val, isSet: true}
}

func (v NullableNewUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
