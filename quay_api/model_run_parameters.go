/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"encoding/json"
)

// checks if the RunParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunParameters{}

// RunParameters Optional run parameters for activating the build trigger
type RunParameters struct {
	// (SCM only) If specified, the name of the branch to build.
	BranchName *string `json:"branch_name,omitempty"`
	// (Custom Only) If specified, the ref/SHA1 used to checkout a git repository.
	CommitSha *string `json:"commit_sha,omitempty"`
}

// NewRunParameters instantiates a new RunParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunParameters() *RunParameters {
	this := RunParameters{}
	return &this
}

// NewRunParametersWithDefaults instantiates a new RunParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunParametersWithDefaults() *RunParameters {
	this := RunParameters{}
	return &this
}

// GetBranchName returns the BranchName field value if set, zero value otherwise.
func (o *RunParameters) GetBranchName() string {
	if o == nil || IsNil(o.BranchName) {
		var ret string
		return ret
	}
	return *o.BranchName
}

// GetBranchNameOk returns a tuple with the BranchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunParameters) GetBranchNameOk() (*string, bool) {
	if o == nil || IsNil(o.BranchName) {
		return nil, false
	}
	return o.BranchName, true
}

// HasBranchName returns a boolean if a field has been set.
func (o *RunParameters) HasBranchName() bool {
	if o != nil && !IsNil(o.BranchName) {
		return true
	}

	return false
}

// SetBranchName gets a reference to the given string and assigns it to the BranchName field.
func (o *RunParameters) SetBranchName(v string) {
	o.BranchName = &v
}

// GetCommitSha returns the CommitSha field value if set, zero value otherwise.
func (o *RunParameters) GetCommitSha() string {
	if o == nil || IsNil(o.CommitSha) {
		var ret string
		return ret
	}
	return *o.CommitSha
}

// GetCommitShaOk returns a tuple with the CommitSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunParameters) GetCommitShaOk() (*string, bool) {
	if o == nil || IsNil(o.CommitSha) {
		return nil, false
	}
	return o.CommitSha, true
}

// HasCommitSha returns a boolean if a field has been set.
func (o *RunParameters) HasCommitSha() bool {
	if o != nil && !IsNil(o.CommitSha) {
		return true
	}

	return false
}

// SetCommitSha gets a reference to the given string and assigns it to the CommitSha field.
func (o *RunParameters) SetCommitSha(v string) {
	o.CommitSha = &v
}

func (o RunParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BranchName) {
		toSerialize["branch_name"] = o.BranchName
	}
	if !IsNil(o.CommitSha) {
		toSerialize["commit_sha"] = o.CommitSha
	}
	return toSerialize, nil
}

type NullableRunParameters struct {
	value *RunParameters
	isSet bool
}

func (v NullableRunParameters) Get() *RunParameters {
	return v.value
}

func (v *NullableRunParameters) Set(val *RunParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableRunParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableRunParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunParameters(val *RunParameters) *NullableRunParameters {
	return &NullableRunParameters{value: val, isSet: true}
}

func (v NullableRunParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
