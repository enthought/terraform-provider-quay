/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NewRepo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewRepo{}

// NewRepo Description of a new repository
type NewRepo struct {
	// Repository name
	Repository string `json:"repository"`
	// Visibility which the repository will start with
	Visibility string `json:"visibility"`
	// Namespace in which the repository should be created. If omitted, the username of the caller is used
	Namespace *string `json:"namespace,omitempty"`
	// Markdown encoded description for the repository
	Description string `json:"description"`
}

type _NewRepo NewRepo

// NewNewRepo instantiates a new NewRepo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewRepo(repository string, visibility string, description string) *NewRepo {
	this := NewRepo{}
	this.Repository = repository
	this.Visibility = visibility
	this.Description = description
	return &this
}

// NewNewRepoWithDefaults instantiates a new NewRepo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewRepoWithDefaults() *NewRepo {
	this := NewRepo{}
	return &this
}

// GetRepository returns the Repository field value
func (o *NewRepo) GetRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *NewRepo) GetRepositoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *NewRepo) SetRepository(v string) {
	o.Repository = v
}

// GetVisibility returns the Visibility field value
func (o *NewRepo) GetVisibility() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *NewRepo) GetVisibilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visibility, true
}

// SetVisibility sets field value
func (o *NewRepo) SetVisibility(v string) {
	o.Visibility = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *NewRepo) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewRepo) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *NewRepo) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *NewRepo) SetNamespace(v string) {
	o.Namespace = &v
}

// GetDescription returns the Description field value
func (o *NewRepo) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *NewRepo) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *NewRepo) SetDescription(v string) {
	o.Description = v
}

func (o NewRepo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewRepo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["repository"] = o.Repository
	toSerialize["visibility"] = o.Visibility
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	toSerialize["description"] = o.Description
	return toSerialize, nil
}

func (o *NewRepo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"repository",
		"visibility",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewRepo := _NewRepo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewRepo)

	if err != nil {
		return err
	}

	*o = NewRepo(varNewRepo)

	return err
}

type NullableNewRepo struct {
	value *NewRepo
	isSet bool
}

func (v NullableNewRepo) Get() *NewRepo {
	return v.value
}

func (v *NullableNewRepo) Set(val *NewRepo) {
	v.value = val
	v.isSet = true
}

func (v NullableNewRepo) IsSet() bool {
	return v.isSet
}

func (v *NullableNewRepo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewRepo(val *NewRepo) *NullableNewRepo {
	return &NullableNewRepo{value: val, isSet: true}
}

func (v NullableNewRepo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewRepo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
