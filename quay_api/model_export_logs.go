/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"encoding/json"
)

// checks if the ExportLogs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportLogs{}

// ExportLogs Configuration for an export logs operation
type ExportLogs struct {
	// The callback URL to invoke with a link to the exported logs
	CallbackUrl *string `json:"callback_url,omitempty"`
	// The e-mail address at which to e-mail a link to the exported logs
	CallbackEmail *string `json:"callback_email,omitempty"`
}

// NewExportLogs instantiates a new ExportLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportLogs() *ExportLogs {
	this := ExportLogs{}
	return &this
}

// NewExportLogsWithDefaults instantiates a new ExportLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportLogsWithDefaults() *ExportLogs {
	this := ExportLogs{}
	return &this
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *ExportLogs) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl) {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportLogs) GetCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackUrl) {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *ExportLogs) HasCallbackUrl() bool {
	if o != nil && !IsNil(o.CallbackUrl) {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *ExportLogs) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

// GetCallbackEmail returns the CallbackEmail field value if set, zero value otherwise.
func (o *ExportLogs) GetCallbackEmail() string {
	if o == nil || IsNil(o.CallbackEmail) {
		var ret string
		return ret
	}
	return *o.CallbackEmail
}

// GetCallbackEmailOk returns a tuple with the CallbackEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportLogs) GetCallbackEmailOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackEmail) {
		return nil, false
	}
	return o.CallbackEmail, true
}

// HasCallbackEmail returns a boolean if a field has been set.
func (o *ExportLogs) HasCallbackEmail() bool {
	if o != nil && !IsNil(o.CallbackEmail) {
		return true
	}

	return false
}

// SetCallbackEmail gets a reference to the given string and assigns it to the CallbackEmail field.
func (o *ExportLogs) SetCallbackEmail(v string) {
	o.CallbackEmail = &v
}

func (o ExportLogs) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportLogs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallbackUrl) {
		toSerialize["callback_url"] = o.CallbackUrl
	}
	if !IsNil(o.CallbackEmail) {
		toSerialize["callback_email"] = o.CallbackEmail
	}
	return toSerialize, nil
}

type NullableExportLogs struct {
	value *ExportLogs
	isSet bool
}

func (v NullableExportLogs) Get() *ExportLogs {
	return v.value
}

func (v *NullableExportLogs) Set(val *ExportLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableExportLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableExportLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportLogs(val *ExportLogs) *NullableExportLogs {
	return &NullableExportLogs{value: val, isSet: true}
}

func (v NullableExportLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
