/*
Quay Frontend

Testing TriggerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package quay_api

import (
	"context"
	openapiclient "github.com/enthought/terraform-provider-quay/quay_api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_quay_api_TriggerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TriggerAPIService ActivateBuildTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var triggerUuid string
		var repository string

		httpRes, err := apiClient.TriggerAPI.ActivateBuildTrigger(context.Background(), triggerUuid, repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggerAPIService DeleteBuildTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var triggerUuid string
		var repository string

		httpRes, err := apiClient.TriggerAPI.DeleteBuildTrigger(context.Background(), triggerUuid, repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggerAPIService GetBuildTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var triggerUuid string
		var repository string

		httpRes, err := apiClient.TriggerAPI.GetBuildTrigger(context.Background(), triggerUuid, repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggerAPIService ListBuildTriggers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string

		httpRes, err := apiClient.TriggerAPI.ListBuildTriggers(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggerAPIService ListTriggerRecentBuilds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var triggerUuid string
		var repository string

		httpRes, err := apiClient.TriggerAPI.ListTriggerRecentBuilds(context.Background(), triggerUuid, repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggerAPIService ManuallyStartBuildTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var triggerUuid string
		var repository string

		httpRes, err := apiClient.TriggerAPI.ManuallyStartBuildTrigger(context.Background(), triggerUuid, repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggerAPIService UpdateBuildTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var triggerUuid string
		var repository string

		httpRes, err := apiClient.TriggerAPI.UpdateBuildTrigger(context.Background(), triggerUuid, repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
