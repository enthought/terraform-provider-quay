/*
Quay Frontend

Testing TeamAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package quay_api

import (
	"context"
	openapiclient "github.com/enthought/terraform-provider-quay/quay_api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_quay_api_TeamAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TeamAPIService DeleteOrganizationTeam", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var teamname string

		httpRes, err := apiClient.TeamAPI.DeleteOrganizationTeam(context.Background(), orgname, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService DeleteOrganizationTeamMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var membername string
		var teamname string

		httpRes, err := apiClient.TeamAPI.DeleteOrganizationTeamMember(context.Background(), orgname, membername, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService DeleteTeamMemberEmailInvite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var email string
		var teamname string

		httpRes, err := apiClient.TeamAPI.DeleteTeamMemberEmailInvite(context.Background(), orgname, email, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService DisableOrganizationTeamSync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var teamname string

		httpRes, err := apiClient.TeamAPI.DisableOrganizationTeamSync(context.Background(), orgname, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService EnableOrganizationTeamSync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var teamname string

		httpRes, err := apiClient.TeamAPI.EnableOrganizationTeamSync(context.Background(), orgname, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService GetOrganizationTeamMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var teamname string

		httpRes, err := apiClient.TeamAPI.GetOrganizationTeamMembers(context.Background(), orgname, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService GetOrganizationTeamPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var teamname string

		httpRes, err := apiClient.TeamAPI.GetOrganizationTeamPermissions(context.Background(), orgname, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService InviteTeamMemberEmail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var email string
		var teamname string

		httpRes, err := apiClient.TeamAPI.InviteTeamMemberEmail(context.Background(), orgname, email, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService UpdateOrganizationTeam", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var teamname string

		httpRes, err := apiClient.TeamAPI.UpdateOrganizationTeam(context.Background(), orgname, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService UpdateOrganizationTeamMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var membername string
		var teamname string

		httpRes, err := apiClient.TeamAPI.UpdateOrganizationTeamMember(context.Background(), orgname, membername, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
