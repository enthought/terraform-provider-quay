/*
Quay Frontend

Testing RobotAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package quay_api

import (
	"context"
	openapiclient "github.com/enthought/terraform-provider-quay/quay_api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_quay_api_RobotAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RobotAPIService CreateOrgRobot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var robotShortname string

		httpRes, err := apiClient.RobotAPI.CreateOrgRobot(context.Background(), orgname, robotShortname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RobotAPIService CreateUserRobot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var robotShortname string

		httpRes, err := apiClient.RobotAPI.CreateUserRobot(context.Background(), robotShortname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RobotAPIService DeleteOrgRobot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var robotShortname string

		httpRes, err := apiClient.RobotAPI.DeleteOrgRobot(context.Background(), orgname, robotShortname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RobotAPIService DeleteUserRobot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var robotShortname string

		httpRes, err := apiClient.RobotAPI.DeleteUserRobot(context.Background(), robotShortname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RobotAPIService GetOrgRobot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var robotShortname string

		httpRes, err := apiClient.RobotAPI.GetOrgRobot(context.Background(), orgname, robotShortname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RobotAPIService GetOrgRobotPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var robotShortname string

		httpRes, err := apiClient.RobotAPI.GetOrgRobotPermissions(context.Background(), orgname, robotShortname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RobotAPIService GetOrgRobots", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string

		httpRes, err := apiClient.RobotAPI.GetOrgRobots(context.Background(), orgname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RobotAPIService GetUserRobot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var robotShortname string

		httpRes, err := apiClient.RobotAPI.GetUserRobot(context.Background(), robotShortname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RobotAPIService GetUserRobotPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var robotShortname string

		httpRes, err := apiClient.RobotAPI.GetUserRobotPermissions(context.Background(), robotShortname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RobotAPIService GetUserRobots", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.RobotAPI.GetUserRobots(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RobotAPIService RegenerateOrgRobotToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var robotShortname string

		httpRes, err := apiClient.RobotAPI.RegenerateOrgRobotToken(context.Background(), orgname, robotShortname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RobotAPIService RegenerateUserRobotToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var robotShortname string

		httpRes, err := apiClient.RobotAPI.RegenerateUserRobotToken(context.Background(), robotShortname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
