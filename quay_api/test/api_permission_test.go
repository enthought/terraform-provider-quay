/*
Quay Frontend

Testing PermissionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package quay_api

import (
	"context"
	openapiclient "github.com/enthought/terraform-provider-quay/quay_api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_quay_api_PermissionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PermissionAPIService ChangeTeamPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string
		var teamname string

		httpRes, err := apiClient.PermissionAPI.ChangeTeamPermissions(context.Background(), repository, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionAPIService ChangeUserPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string
		var username string

		httpRes, err := apiClient.PermissionAPI.ChangeUserPermissions(context.Background(), repository, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionAPIService DeleteTeamPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string
		var teamname string

		httpRes, err := apiClient.PermissionAPI.DeleteTeamPermissions(context.Background(), repository, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionAPIService DeleteUserPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string
		var username string

		httpRes, err := apiClient.PermissionAPI.DeleteUserPermissions(context.Background(), repository, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionAPIService GetTeamPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string
		var teamname string

		httpRes, err := apiClient.PermissionAPI.GetTeamPermissions(context.Background(), repository, teamname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionAPIService GetUserPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string
		var username string

		httpRes, err := apiClient.PermissionAPI.GetUserPermissions(context.Background(), repository, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionAPIService GetUserTransitivePermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string
		var username string

		httpRes, err := apiClient.PermissionAPI.GetUserTransitivePermission(context.Background(), repository, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionAPIService ListRepoTeamPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string

		httpRes, err := apiClient.PermissionAPI.ListRepoTeamPermissions(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionAPIService ListRepoUserPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string

		httpRes, err := apiClient.PermissionAPI.ListRepoUserPermissions(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
