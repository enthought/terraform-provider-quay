/*
Quay Frontend

Testing PrototypeAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package quay_api

import (
	"context"
	openapiclient "github.com/enthought/terraform-provider-quay/quay_api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_quay_api_PrototypeAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PrototypeAPIService CreateOrganizationPrototypePermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string

		httpRes, err := apiClient.PrototypeAPI.CreateOrganizationPrototypePermission(context.Background(), orgname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrototypeAPIService DeleteOrganizationPrototypePermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var prototypeid string

		httpRes, err := apiClient.PrototypeAPI.DeleteOrganizationPrototypePermission(context.Background(), orgname, prototypeid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrototypeAPIService GetOrganizationPrototypePermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string

		httpRes, err := apiClient.PrototypeAPI.GetOrganizationPrototypePermissions(context.Background(), orgname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrototypeAPIService UpdateOrganizationPrototypePermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgname string
		var prototypeid string

		httpRes, err := apiClient.PrototypeAPI.UpdateOrganizationPrototypePermission(context.Background(), orgname, prototypeid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
