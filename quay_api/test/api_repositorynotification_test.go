/*
Quay Frontend

Testing RepositorynotificationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package quay_api

import (
	"context"
	openapiclient "github.com/enthought/terraform-provider-quay/quay_api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_quay_api_RepositorynotificationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RepositorynotificationAPIService CreateRepoNotification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string

		httpRes, err := apiClient.RepositorynotificationAPI.CreateRepoNotification(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositorynotificationAPIService DeleteRepoNotification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string
		var uuid string

		httpRes, err := apiClient.RepositorynotificationAPI.DeleteRepoNotification(context.Background(), repository, uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositorynotificationAPIService GetRepoNotification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string
		var uuid string

		httpRes, err := apiClient.RepositorynotificationAPI.GetRepoNotification(context.Background(), repository, uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositorynotificationAPIService ListRepoNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string

		httpRes, err := apiClient.RepositorynotificationAPI.ListRepoNotifications(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositorynotificationAPIService ResetRepositoryNotificationFailures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string
		var uuid string

		httpRes, err := apiClient.RepositorynotificationAPI.ResetRepositoryNotificationFailures(context.Background(), repository, uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositorynotificationAPIService TestRepoNotification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repository string
		var uuid string

		httpRes, err := apiClient.RepositorynotificationAPI.TestRepoNotification(context.Background(), repository, uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
