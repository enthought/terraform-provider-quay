/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// LogsAPIService LogsAPI service
type LogsAPIService service

type ApiExportOrgLogsRequest struct {
	ctx        context.Context
	ApiService *LogsAPIService
	orgname    string
	body       *ExportLogs
	endtime    *string
	starttime  *string
}

// Request body contents.
func (r ApiExportOrgLogsRequest) Body(body ExportLogs) ApiExportOrgLogsRequest {
	r.body = &body
	return r
}

// Latest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiExportOrgLogsRequest) Endtime(endtime string) ApiExportOrgLogsRequest {
	r.endtime = &endtime
	return r
}

// Earliest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiExportOrgLogsRequest) Starttime(starttime string) ApiExportOrgLogsRequest {
	r.starttime = &starttime
	return r
}

func (r ApiExportOrgLogsRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExportOrgLogsExecute(r)
}

/*
ExportOrgLogs Method for ExportOrgLogs

Exports the logs for the specified organization.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgname The name of the organization
	@return ApiExportOrgLogsRequest
*/
func (a *LogsAPIService) ExportOrgLogs(ctx context.Context, orgname string) ApiExportOrgLogsRequest {
	return ApiExportOrgLogsRequest{
		ApiService: a,
		ctx:        ctx,
		orgname:    orgname,
	}
}

// Execute executes the request
func (a *LogsAPIService) ExportOrgLogsExecute(r ApiExportOrgLogsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.ExportOrgLogs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organization/{orgname}/exportlogs"
	localVarPath = strings.Replace(localVarPath, "{"+"orgname"+"}", url.PathEscape(parameterValueToString(r.orgname, "orgname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	if r.endtime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endtime", r.endtime, "")
	}
	if r.starttime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starttime", r.starttime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExportRepoLogsRequest struct {
	ctx        context.Context
	ApiService *LogsAPIService
	repository string
	body       *ExportLogs
	endtime    *string
	starttime  *string
}

// Request body contents.
func (r ApiExportRepoLogsRequest) Body(body ExportLogs) ApiExportRepoLogsRequest {
	r.body = &body
	return r
}

// Latest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiExportRepoLogsRequest) Endtime(endtime string) ApiExportRepoLogsRequest {
	r.endtime = &endtime
	return r
}

// Earliest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiExportRepoLogsRequest) Starttime(starttime string) ApiExportRepoLogsRequest {
	r.starttime = &starttime
	return r
}

func (r ApiExportRepoLogsRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExportRepoLogsExecute(r)
}

/*
ExportRepoLogs Method for ExportRepoLogs

Queues an export of the logs for the specified repository.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param repository The full path of the repository. e.g. namespace/name
	@return ApiExportRepoLogsRequest
*/
func (a *LogsAPIService) ExportRepoLogs(ctx context.Context, repository string) ApiExportRepoLogsRequest {
	return ApiExportRepoLogsRequest{
		ApiService: a,
		ctx:        ctx,
		repository: repository,
	}
}

// Execute executes the request
func (a *LogsAPIService) ExportRepoLogsExecute(r ApiExportRepoLogsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.ExportRepoLogs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/repository/{repository}/exportlogs"
	localVarPath = strings.Replace(localVarPath, "{"+"repository"+"}", url.PathEscape(parameterValueToString(r.repository, "repository")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	if r.endtime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endtime", r.endtime, "")
	}
	if r.starttime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starttime", r.starttime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExportUserLogsRequest struct {
	ctx        context.Context
	ApiService *LogsAPIService
	body       *ExportLogs
	endtime    *string
	starttime  *string
}

// Request body contents.
func (r ApiExportUserLogsRequest) Body(body ExportLogs) ApiExportUserLogsRequest {
	r.body = &body
	return r
}

// Latest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiExportUserLogsRequest) Endtime(endtime string) ApiExportUserLogsRequest {
	r.endtime = &endtime
	return r
}

// Earliest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiExportUserLogsRequest) Starttime(starttime string) ApiExportUserLogsRequest {
	r.starttime = &starttime
	return r
}

func (r ApiExportUserLogsRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExportUserLogsExecute(r)
}

/*
ExportUserLogs Method for ExportUserLogs

Returns the aggregated logs for the current user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExportUserLogsRequest
*/
func (a *LogsAPIService) ExportUserLogs(ctx context.Context) ApiExportUserLogsRequest {
	return ApiExportUserLogsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *LogsAPIService) ExportUserLogsExecute(r ApiExportUserLogsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.ExportUserLogs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/exportlogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	if r.endtime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endtime", r.endtime, "")
	}
	if r.starttime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starttime", r.starttime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAggregateOrgLogsRequest struct {
	ctx        context.Context
	ApiService *LogsAPIService
	orgname    string
	performer  *string
	endtime    *string
	starttime  *string
}

// Username for which to filter logs.
func (r ApiGetAggregateOrgLogsRequest) Performer(performer string) ApiGetAggregateOrgLogsRequest {
	r.performer = &performer
	return r
}

// Latest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiGetAggregateOrgLogsRequest) Endtime(endtime string) ApiGetAggregateOrgLogsRequest {
	r.endtime = &endtime
	return r
}

// Earliest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiGetAggregateOrgLogsRequest) Starttime(starttime string) ApiGetAggregateOrgLogsRequest {
	r.starttime = &starttime
	return r
}

func (r ApiGetAggregateOrgLogsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAggregateOrgLogsExecute(r)
}

/*
GetAggregateOrgLogs Method for GetAggregateOrgLogs

Gets the aggregated logs for the specified organization.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgname The name of the organization
	@return ApiGetAggregateOrgLogsRequest
*/
func (a *LogsAPIService) GetAggregateOrgLogs(ctx context.Context, orgname string) ApiGetAggregateOrgLogsRequest {
	return ApiGetAggregateOrgLogsRequest{
		ApiService: a,
		ctx:        ctx,
		orgname:    orgname,
	}
}

// Execute executes the request
func (a *LogsAPIService) GetAggregateOrgLogsExecute(r ApiGetAggregateOrgLogsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.GetAggregateOrgLogs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organization/{orgname}/aggregatelogs"
	localVarPath = strings.Replace(localVarPath, "{"+"orgname"+"}", url.PathEscape(parameterValueToString(r.orgname, "orgname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.performer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "performer", r.performer, "")
	}
	if r.endtime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endtime", r.endtime, "")
	}
	if r.starttime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starttime", r.starttime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAggregateRepoLogsRequest struct {
	ctx        context.Context
	ApiService *LogsAPIService
	repository string
	endtime    *string
	starttime  *string
}

// Latest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiGetAggregateRepoLogsRequest) Endtime(endtime string) ApiGetAggregateRepoLogsRequest {
	r.endtime = &endtime
	return r
}

// Earliest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiGetAggregateRepoLogsRequest) Starttime(starttime string) ApiGetAggregateRepoLogsRequest {
	r.starttime = &starttime
	return r
}

func (r ApiGetAggregateRepoLogsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAggregateRepoLogsExecute(r)
}

/*
GetAggregateRepoLogs Method for GetAggregateRepoLogs

Returns the aggregated logs for the specified repository.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param repository The full path of the repository. e.g. namespace/name
	@return ApiGetAggregateRepoLogsRequest
*/
func (a *LogsAPIService) GetAggregateRepoLogs(ctx context.Context, repository string) ApiGetAggregateRepoLogsRequest {
	return ApiGetAggregateRepoLogsRequest{
		ApiService: a,
		ctx:        ctx,
		repository: repository,
	}
}

// Execute executes the request
func (a *LogsAPIService) GetAggregateRepoLogsExecute(r ApiGetAggregateRepoLogsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.GetAggregateRepoLogs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/repository/{repository}/aggregatelogs"
	localVarPath = strings.Replace(localVarPath, "{"+"repository"+"}", url.PathEscape(parameterValueToString(r.repository, "repository")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endtime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endtime", r.endtime, "")
	}
	if r.starttime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starttime", r.starttime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAggregateUserLogsRequest struct {
	ctx        context.Context
	ApiService *LogsAPIService
	performer  *string
	endtime    *string
	starttime  *string
}

// Username for which to filter logs.
func (r ApiGetAggregateUserLogsRequest) Performer(performer string) ApiGetAggregateUserLogsRequest {
	r.performer = &performer
	return r
}

// Latest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiGetAggregateUserLogsRequest) Endtime(endtime string) ApiGetAggregateUserLogsRequest {
	r.endtime = &endtime
	return r
}

// Earliest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiGetAggregateUserLogsRequest) Starttime(starttime string) ApiGetAggregateUserLogsRequest {
	r.starttime = &starttime
	return r
}

func (r ApiGetAggregateUserLogsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAggregateUserLogsExecute(r)
}

/*
GetAggregateUserLogs Method for GetAggregateUserLogs

Returns the aggregated logs for the current user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAggregateUserLogsRequest
*/
func (a *LogsAPIService) GetAggregateUserLogs(ctx context.Context) ApiGetAggregateUserLogsRequest {
	return ApiGetAggregateUserLogsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *LogsAPIService) GetAggregateUserLogsExecute(r ApiGetAggregateUserLogsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.GetAggregateUserLogs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/aggregatelogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.performer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "performer", r.performer, "")
	}
	if r.endtime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endtime", r.endtime, "")
	}
	if r.starttime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starttime", r.starttime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListOrgLogsRequest struct {
	ctx        context.Context
	ApiService *LogsAPIService
	orgname    string
	nextPage   *string
	performer  *string
	endtime    *string
	starttime  *string
}

// The page token for the next page
func (r ApiListOrgLogsRequest) NextPage(nextPage string) ApiListOrgLogsRequest {
	r.nextPage = &nextPage
	return r
}

// Username for which to filter logs.
func (r ApiListOrgLogsRequest) Performer(performer string) ApiListOrgLogsRequest {
	r.performer = &performer
	return r
}

// Latest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiListOrgLogsRequest) Endtime(endtime string) ApiListOrgLogsRequest {
	r.endtime = &endtime
	return r
}

// Earliest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiListOrgLogsRequest) Starttime(starttime string) ApiListOrgLogsRequest {
	r.starttime = &starttime
	return r
}

func (r ApiListOrgLogsRequest) Execute() (*http.Response, error) {
	return r.ApiService.ListOrgLogsExecute(r)
}

/*
ListOrgLogs Method for ListOrgLogs

List the logs for the specified organization.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgname The name of the organization
	@return ApiListOrgLogsRequest
*/
func (a *LogsAPIService) ListOrgLogs(ctx context.Context, orgname string) ApiListOrgLogsRequest {
	return ApiListOrgLogsRequest{
		ApiService: a,
		ctx:        ctx,
		orgname:    orgname,
	}
}

// Execute executes the request
func (a *LogsAPIService) ListOrgLogsExecute(r ApiListOrgLogsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.ListOrgLogs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organization/{orgname}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"orgname"+"}", url.PathEscape(parameterValueToString(r.orgname, "orgname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.nextPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "next_page", r.nextPage, "")
	}
	if r.performer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "performer", r.performer, "")
	}
	if r.endtime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endtime", r.endtime, "")
	}
	if r.starttime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starttime", r.starttime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListRepoLogsRequest struct {
	ctx        context.Context
	ApiService *LogsAPIService
	repository string
	nextPage   *string
	endtime    *string
	starttime  *string
}

// The page token for the next page
func (r ApiListRepoLogsRequest) NextPage(nextPage string) ApiListRepoLogsRequest {
	r.nextPage = &nextPage
	return r
}

// Latest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiListRepoLogsRequest) Endtime(endtime string) ApiListRepoLogsRequest {
	r.endtime = &endtime
	return r
}

// Earliest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiListRepoLogsRequest) Starttime(starttime string) ApiListRepoLogsRequest {
	r.starttime = &starttime
	return r
}

func (r ApiListRepoLogsRequest) Execute() (*http.Response, error) {
	return r.ApiService.ListRepoLogsExecute(r)
}

/*
ListRepoLogs Method for ListRepoLogs

List the logs for the specified repository.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param repository The full path of the repository. e.g. namespace/name
	@return ApiListRepoLogsRequest
*/
func (a *LogsAPIService) ListRepoLogs(ctx context.Context, repository string) ApiListRepoLogsRequest {
	return ApiListRepoLogsRequest{
		ApiService: a,
		ctx:        ctx,
		repository: repository,
	}
}

// Execute executes the request
func (a *LogsAPIService) ListRepoLogsExecute(r ApiListRepoLogsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.ListRepoLogs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/repository/{repository}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"repository"+"}", url.PathEscape(parameterValueToString(r.repository, "repository")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.nextPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "next_page", r.nextPage, "")
	}
	if r.endtime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endtime", r.endtime, "")
	}
	if r.starttime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starttime", r.starttime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListUserLogsRequest struct {
	ctx        context.Context
	ApiService *LogsAPIService
	nextPage   *string
	performer  *string
	endtime    *string
	starttime  *string
}

// The page token for the next page
func (r ApiListUserLogsRequest) NextPage(nextPage string) ApiListUserLogsRequest {
	r.nextPage = &nextPage
	return r
}

// Username for which to filter logs.
func (r ApiListUserLogsRequest) Performer(performer string) ApiListUserLogsRequest {
	r.performer = &performer
	return r
}

// Latest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiListUserLogsRequest) Endtime(endtime string) ApiListUserLogsRequest {
	r.endtime = &endtime
	return r
}

// Earliest time for logs. Format: \&quot;%m/%d/%Y\&quot; in UTC.
func (r ApiListUserLogsRequest) Starttime(starttime string) ApiListUserLogsRequest {
	r.starttime = &starttime
	return r
}

func (r ApiListUserLogsRequest) Execute() (*http.Response, error) {
	return r.ApiService.ListUserLogsExecute(r)
}

/*
ListUserLogs Method for ListUserLogs

List the logs for the current user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListUserLogsRequest
*/
func (a *LogsAPIService) ListUserLogs(ctx context.Context) ApiListUserLogsRequest {
	return ApiListUserLogsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *LogsAPIService) ListUserLogsExecute(r ApiListUserLogsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.ListUserLogs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/logs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.nextPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "next_page", r.nextPage, "")
	}
	if r.performer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "performer", r.performer, "")
	}
	if r.endtime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endtime", r.endtime, "")
	}
	if r.starttime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starttime", r.starttime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
