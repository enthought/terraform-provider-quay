/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"encoding/json"
)

// checks if the UpdateNamespaceQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNamespaceQuota{}

// UpdateNamespaceQuota Description of a new organization quota
type UpdateNamespaceQuota struct {
	// Number of bytes the organization is allowed
	LimitBytes *int32 `json:"limit_bytes,omitempty"`
}

// NewUpdateNamespaceQuota instantiates a new UpdateNamespaceQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNamespaceQuota() *UpdateNamespaceQuota {
	this := UpdateNamespaceQuota{}
	return &this
}

// NewUpdateNamespaceQuotaWithDefaults instantiates a new UpdateNamespaceQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNamespaceQuotaWithDefaults() *UpdateNamespaceQuota {
	this := UpdateNamespaceQuota{}
	return &this
}

// GetLimitBytes returns the LimitBytes field value if set, zero value otherwise.
func (o *UpdateNamespaceQuota) GetLimitBytes() int32 {
	if o == nil || IsNil(o.LimitBytes) {
		var ret int32
		return ret
	}
	return *o.LimitBytes
}

// GetLimitBytesOk returns a tuple with the LimitBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNamespaceQuota) GetLimitBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.LimitBytes) {
		return nil, false
	}
	return o.LimitBytes, true
}

// HasLimitBytes returns a boolean if a field has been set.
func (o *UpdateNamespaceQuota) HasLimitBytes() bool {
	if o != nil && !IsNil(o.LimitBytes) {
		return true
	}

	return false
}

// SetLimitBytes gets a reference to the given int32 and assigns it to the LimitBytes field.
func (o *UpdateNamespaceQuota) SetLimitBytes(v int32) {
	o.LimitBytes = &v
}

func (o UpdateNamespaceQuota) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNamespaceQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LimitBytes) {
		toSerialize["limit_bytes"] = o.LimitBytes
	}
	return toSerialize, nil
}

type NullableUpdateNamespaceQuota struct {
	value *UpdateNamespaceQuota
	isSet bool
}

func (v NullableUpdateNamespaceQuota) Get() *UpdateNamespaceQuota {
	return v.value
}

func (v *NullableUpdateNamespaceQuota) Set(val *UpdateNamespaceQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNamespaceQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNamespaceQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNamespaceQuota(val *UpdateNamespaceQuota) *NullableUpdateNamespaceQuota {
	return &NullableUpdateNamespaceQuota{value: val, isSet: true}
}

func (v NullableUpdateNamespaceQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNamespaceQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
