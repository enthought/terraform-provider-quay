/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"encoding/json"
)

// checks if the PutServiceKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutServiceKey{}

// PutServiceKey Description of updates for a service key
type PutServiceKey struct {
	// The friendly name of a service key
	Name *string `json:"name,omitempty"`
	// The key/value pairs of this key's metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The expiration date as a unix timestamp
	Expiration map[string]interface{} `json:"expiration,omitempty"`
}

// NewPutServiceKey instantiates a new PutServiceKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutServiceKey() *PutServiceKey {
	this := PutServiceKey{}
	return &this
}

// NewPutServiceKeyWithDefaults instantiates a new PutServiceKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutServiceKeyWithDefaults() *PutServiceKey {
	this := PutServiceKey{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PutServiceKey) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutServiceKey) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PutServiceKey) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PutServiceKey) SetName(v string) {
	o.Name = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PutServiceKey) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutServiceKey) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PutServiceKey) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *PutServiceKey) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *PutServiceKey) GetExpiration() map[string]interface{} {
	if o == nil || IsNil(o.Expiration) {
		var ret map[string]interface{}
		return ret
	}
	return o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutServiceKey) GetExpirationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Expiration) {
		return map[string]interface{}{}, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *PutServiceKey) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given map[string]interface{} and assigns it to the Expiration field.
func (o *PutServiceKey) SetExpiration(v map[string]interface{}) {
	o.Expiration = v
}

func (o PutServiceKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutServiceKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	return toSerialize, nil
}

type NullablePutServiceKey struct {
	value *PutServiceKey
	isSet bool
}

func (v NullablePutServiceKey) Get() *PutServiceKey {
	return v.value
}

func (v *NullablePutServiceKey) Set(val *PutServiceKey) {
	v.value = val
	v.isSet = true
}

func (v NullablePutServiceKey) IsSet() bool {
	return v.isSet
}

func (v *NullablePutServiceKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutServiceKey(val *PutServiceKey) *NullablePutServiceKey {
	return &NullablePutServiceKey{value: val, isSet: true}
}

func (v NullablePutServiceKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutServiceKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
