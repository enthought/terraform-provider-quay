/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NewOrg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewOrg{}

// NewOrg Description of a new organization.
type NewOrg struct {
	// Organization username
	Name string `json:"name"`
	// Organization contact email
	Email string `json:"email"`
	// The (may be disabled) recaptcha response code for verification
	RecaptchaResponse *string `json:"recaptcha_response,omitempty"`
}

type _NewOrg NewOrg

// NewNewOrg instantiates a new NewOrg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewOrg(name string, email string) *NewOrg {
	this := NewOrg{}
	this.Name = name
	this.Email = email
	return &this
}

// NewNewOrgWithDefaults instantiates a new NewOrg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewOrgWithDefaults() *NewOrg {
	this := NewOrg{}
	return &this
}

// GetName returns the Name field value
func (o *NewOrg) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NewOrg) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NewOrg) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *NewOrg) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *NewOrg) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *NewOrg) SetEmail(v string) {
	o.Email = v
}

// GetRecaptchaResponse returns the RecaptchaResponse field value if set, zero value otherwise.
func (o *NewOrg) GetRecaptchaResponse() string {
	if o == nil || IsNil(o.RecaptchaResponse) {
		var ret string
		return ret
	}
	return *o.RecaptchaResponse
}

// GetRecaptchaResponseOk returns a tuple with the RecaptchaResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewOrg) GetRecaptchaResponseOk() (*string, bool) {
	if o == nil || IsNil(o.RecaptchaResponse) {
		return nil, false
	}
	return o.RecaptchaResponse, true
}

// HasRecaptchaResponse returns a boolean if a field has been set.
func (o *NewOrg) HasRecaptchaResponse() bool {
	if o != nil && !IsNil(o.RecaptchaResponse) {
		return true
	}

	return false
}

// SetRecaptchaResponse gets a reference to the given string and assigns it to the RecaptchaResponse field.
func (o *NewOrg) SetRecaptchaResponse(v string) {
	o.RecaptchaResponse = &v
}

func (o NewOrg) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewOrg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["email"] = o.Email
	if !IsNil(o.RecaptchaResponse) {
		toSerialize["recaptcha_response"] = o.RecaptchaResponse
	}
	return toSerialize, nil
}

func (o *NewOrg) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewOrg := _NewOrg{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewOrg)

	if err != nil {
		return err
	}

	*o = NewOrg(varNewOrg)

	return err
}

type NullableNewOrg struct {
	value *NewOrg
	isSet bool
}

func (v NullableNewOrg) Get() *NewOrg {
	return v.value
}

func (v *NullableNewOrg) Set(val *NewOrg) {
	v.value = val
	v.isSet = true
}

func (v NullableNewOrg) IsSet() bool {
	return v.isSet
}

func (v *NullableNewOrg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewOrg(val *NewOrg) *NullableNewOrg {
	return &NullableNewOrg{value: val, isSet: true}
}

func (v NullableNewOrg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewOrg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
