/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NewNamespaceQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewNamespaceQuota{}

// NewNamespaceQuota Description of a new organization quota
type NewNamespaceQuota struct {
	// Number of bytes the organization is allowed
	LimitBytes int32 `json:"limit_bytes"`
}

type _NewNamespaceQuota NewNamespaceQuota

// NewNewNamespaceQuota instantiates a new NewNamespaceQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewNamespaceQuota(limitBytes int32) *NewNamespaceQuota {
	this := NewNamespaceQuota{}
	this.LimitBytes = limitBytes
	return &this
}

// NewNewNamespaceQuotaWithDefaults instantiates a new NewNamespaceQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewNamespaceQuotaWithDefaults() *NewNamespaceQuota {
	this := NewNamespaceQuota{}
	return &this
}

// GetLimitBytes returns the LimitBytes field value
func (o *NewNamespaceQuota) GetLimitBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LimitBytes
}

// GetLimitBytesOk returns a tuple with the LimitBytes field value
// and a boolean to check if the value has been set.
func (o *NewNamespaceQuota) GetLimitBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LimitBytes, true
}

// SetLimitBytes sets field value
func (o *NewNamespaceQuota) SetLimitBytes(v int32) {
	o.LimitBytes = v
}

func (o NewNamespaceQuota) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewNamespaceQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limit_bytes"] = o.LimitBytes
	return toSerialize, nil
}

func (o *NewNamespaceQuota) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"limit_bytes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewNamespaceQuota := _NewNamespaceQuota{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewNamespaceQuota)

	if err != nil {
		return err
	}

	*o = NewNamespaceQuota(varNewNamespaceQuota)

	return err
}

type NullableNewNamespaceQuota struct {
	value *NewNamespaceQuota
	isSet bool
}

func (v NullableNewNamespaceQuota) Get() *NewNamespaceQuota {
	return v.value
}

func (v *NullableNewNamespaceQuota) Set(val *NewNamespaceQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableNewNamespaceQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableNewNamespaceQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewNamespaceQuota(val *NewNamespaceQuota) *NullableNewNamespaceQuota {
	return &NullableNewNamespaceQuota{value: val, isSet: true}
}

func (v NullableNewNamespaceQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewNamespaceQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
