/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NotificationCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationCreateRequest{}

// NotificationCreateRequest Information for creating a notification on a repository
type NotificationCreateRequest struct {
	// The event on which the notification will respond
	Event string `json:"event"`
	// The method of notification (such as email or web callback)
	Method string `json:"method"`
	// JSON config information for the specific method of notification
	Config map[string]interface{} `json:"config"`
	// JSON config information for the specific event of notification
	EventConfig map[string]interface{} `json:"eventConfig"`
	// The human-readable title of the notification
	Title *string `json:"title,omitempty"`
}

type _NotificationCreateRequest NotificationCreateRequest

// NewNotificationCreateRequest instantiates a new NotificationCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationCreateRequest(event string, method string, config map[string]interface{}, eventConfig map[string]interface{}) *NotificationCreateRequest {
	this := NotificationCreateRequest{}
	this.Event = event
	this.Method = method
	this.Config = config
	this.EventConfig = eventConfig
	return &this
}

// NewNotificationCreateRequestWithDefaults instantiates a new NotificationCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationCreateRequestWithDefaults() *NotificationCreateRequest {
	this := NotificationCreateRequest{}
	return &this
}

// GetEvent returns the Event field value
func (o *NotificationCreateRequest) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *NotificationCreateRequest) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *NotificationCreateRequest) SetEvent(v string) {
	o.Event = v
}

// GetMethod returns the Method field value
func (o *NotificationCreateRequest) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *NotificationCreateRequest) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *NotificationCreateRequest) SetMethod(v string) {
	o.Method = v
}

// GetConfig returns the Config field value
func (o *NotificationCreateRequest) GetConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *NotificationCreateRequest) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// SetConfig sets field value
func (o *NotificationCreateRequest) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetEventConfig returns the EventConfig field value
func (o *NotificationCreateRequest) GetEventConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.EventConfig
}

// GetEventConfigOk returns a tuple with the EventConfig field value
// and a boolean to check if the value has been set.
func (o *NotificationCreateRequest) GetEventConfigOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.EventConfig, true
}

// SetEventConfig sets field value
func (o *NotificationCreateRequest) SetEventConfig(v map[string]interface{}) {
	o.EventConfig = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *NotificationCreateRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationCreateRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *NotificationCreateRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *NotificationCreateRequest) SetTitle(v string) {
	o.Title = &v
}

func (o NotificationCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	toSerialize["method"] = o.Method
	toSerialize["config"] = o.Config
	toSerialize["eventConfig"] = o.EventConfig
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

func (o *NotificationCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event",
		"method",
		"config",
		"eventConfig",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationCreateRequest := _NotificationCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationCreateRequest)

	if err != nil {
		return err
	}

	*o = NotificationCreateRequest(varNotificationCreateRequest)

	return err
}

type NullableNotificationCreateRequest struct {
	value *NotificationCreateRequest
	isSet bool
}

func (v NullableNotificationCreateRequest) Get() *NotificationCreateRequest {
	return v.value
}

func (v *NullableNotificationCreateRequest) Set(val *NotificationCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationCreateRequest(val *NotificationCreateRequest) *NullableNotificationCreateRequest {
	return &NullableNotificationCreateRequest{value: val, isSet: true}
}

func (v NullableNotificationCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
