/*
Quay Frontend

This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.

API version: v1
Contact: admin@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quay_api

import (
	"encoding/json"
)

// checks if the CreateRobot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRobot{}

// CreateRobot Optional data for creating a robot
type CreateRobot struct {
	// Optional text description for the robot
	Description *string `json:"description,omitempty"`
	// Optional unstructured metadata for the robot
	UnstructuredMetadata map[string]interface{} `json:"unstructured_metadata,omitempty"`
}

// NewCreateRobot instantiates a new CreateRobot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRobot() *CreateRobot {
	this := CreateRobot{}
	return &this
}

// NewCreateRobotWithDefaults instantiates a new CreateRobot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRobotWithDefaults() *CreateRobot {
	this := CreateRobot{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateRobot) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRobot) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateRobot) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateRobot) SetDescription(v string) {
	o.Description = &v
}

// GetUnstructuredMetadata returns the UnstructuredMetadata field value if set, zero value otherwise.
func (o *CreateRobot) GetUnstructuredMetadata() map[string]interface{} {
	if o == nil || IsNil(o.UnstructuredMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.UnstructuredMetadata
}

// GetUnstructuredMetadataOk returns a tuple with the UnstructuredMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRobot) GetUnstructuredMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UnstructuredMetadata) {
		return map[string]interface{}{}, false
	}
	return o.UnstructuredMetadata, true
}

// HasUnstructuredMetadata returns a boolean if a field has been set.
func (o *CreateRobot) HasUnstructuredMetadata() bool {
	if o != nil && !IsNil(o.UnstructuredMetadata) {
		return true
	}

	return false
}

// SetUnstructuredMetadata gets a reference to the given map[string]interface{} and assigns it to the UnstructuredMetadata field.
func (o *CreateRobot) SetUnstructuredMetadata(v map[string]interface{}) {
	o.UnstructuredMetadata = v
}

func (o CreateRobot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRobot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.UnstructuredMetadata) {
		toSerialize["unstructured_metadata"] = o.UnstructuredMetadata
	}
	return toSerialize, nil
}

type NullableCreateRobot struct {
	value *CreateRobot
	isSet bool
}

func (v NullableCreateRobot) Get() *CreateRobot {
	return v.value
}

func (v *NullableCreateRobot) Set(val *CreateRobot) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRobot) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRobot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRobot(val *CreateRobot) *NullableCreateRobot {
	return &NullableCreateRobot{value: val, isSet: true}
}

func (v NullableCreateRobot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRobot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
